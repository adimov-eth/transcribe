Аккаунты, это просто как бы стоит, там аккаунты, а у аккаунтов есть storage. Если аккаунт играет с контрактом, то это все в одном кредите. Дальше газовые переменные эти, gasused, gaslimit, они не нужны тут. Как бы из основного получаются вот эти четыре переменных. Предыдущий блок, транзакции, которые войдут и применяются к стейту из предыдущего блока, и какие ресепции из этого выйдут. То есть транзакции, то что входит в блокчейн, машину мы это будем называть, ресепция, что произошло, что отвечает она назад. Можно переименовать транзакцию как транзакцию inbox, а ресепция как event outbox, потому что это событие. Только это input и output от супермашины, от того, кто ее создал и управляет. В том числе пропозер, например. Я же предлагаю добавить второй уровень общения уже, чтобы эти машины могли создавать субмашины, и с ними также общаться через tx.outbox и event.inbox, от них уже. Соответственно, с этого момента мы можем записывать это как квадратики. Стейт мы просто игнорируем, потому что он не участвует. Он просто как финальный хэш того, что произошло по результату. Соответственно, можно дорисовать вот это вот так, это тоже закрыть. Это получается tx.inbox, tx.outbox, event. Почему ресепция надо заменить на event, event.inbox? Похоже, как раз написываешь модель актеров, так называемых, о которых я тебе говорил в этом форуме. Паттерн, блядь, как называется? Ну, актеры так и называются. Короче, дизайн паттерна один из главных. Получается изоляционная система, которая называется актер, который общается с другими актерами через события. Внутри находится какая-то машина, которая может спаунить других актеров, которые также общаются. Это как в браузере, это, например, наиболее яркий пример, это когда ты общаешься с другим окном. То есть ты можешь спаунить другое окно, и, соответственно, ты можешь с ним общаться только через события. А внутри окна там есть собственное состояние. Это примерно то же самое, только в рамках военнодействия. Блокчейна и внешняя система. А сколько там тоже есть внутренние и внешние? Или там один уровень, входящий и выходящий только? Внутри всегда есть какое-то внутреннее состояние. То есть оно экзонирует абсолютно. Просто способ передачи другой. Вряд ли там есть нонсы, секьюрность какая-то. Да, эти актеры, это более абстрактная штука. Они не говорят тебе, как реализовывать. То есть остается квадрат из двух input и двух output. Как выглядит транзакция input? Так же, как в эфире. Это название откуда куда, нонса увеличивающая, и данные, которые передаются, название метода, и подпись. А подпись может быть многогранной. Типа состоят из агрегирования. Точно так же выглядит транзакция output. Только транзакция output теперь подписана всеми участниками, кто отвечает за валидацию. То есть если в input вошел, например, один человек, а эта сущность на пять, то тогда в output будет сущность подписана уже пятью подписями сразу. И это происходит в момент голосования за блок. То есть когда они как раз при коммита возвращают эту подпись на предложенный пропозером блок, параллельно они подписывают каждую исходящую транзакцию. Соответственно, в результате у пропозера есть и подписанный блок, и десять, например, подписанных транзакций, которые можно засылать дальше. Ивенты in приходят от вышестоящих субмашин, потому что эти машины уже точно так же запущены на этом же девайсе. И, соответственно, гарантированно все участники уже имеют там точно такой же набор ивентов, потому что они запускают все вышестоящие машины, которые могут послать эти ивенты назад. То есть представь, у тебя три разных эфира на компьютере запущены, и если ты плюс-минус с одинаковой скоростью синкаешься, то ивенты, которые три разных эфира дали, у тебя сагрегируются в один и тот же event pool. То есть это как main pool только для ивентов, которые приходят сверху. Дальше получается очередь на обработку ивентов. И пропозер, соответственно, тот, кто первый предлагает какие ивенты. То есть у всех у них одинаковые блокчейны исполняются, вот эти машины, и у всех одинаковый поток ивентов, просто с разным, может быть, порядком. Но вот пропозер, он создает из этого определенный порядок, как к нему это пришло, такой референсный порядок ивентов, и всем рассылает. И все остальные проверяют теперь, когда они проверяют транзакции, они проверяют подпись, что нота увеличилась и так далее. С ивентами они проверяют скорее, как засинхронизуя вот эту субмашину до такого-то блок-найдера, там седьмого, а был, например, четвертый, до такого-то хэша. И такой-то список ивентов. И дальше каждый, кто проверяет за пропозером, смотрит, что эти ивенты реально у него в event pool тоже есть. То есть у него то же самое исполнилось, и такие же ивенты прилетели. Может быть, в другом порядке только, но само наличие их должно быть. Соответственно, ивенты точно так же исполняются, как и транзакции. То есть они могут вызвать, например, следующую транзакцию вверх, либо могут вызвать, например, когда из канала приходит ивент, что пришли деньги хабу, то он создает txout, только теперь направление является уже следующий канал, к которому уже он хочет отправить эти деньги. И ивенты out, соответственно, могут отправить дальше события вниз, ниже стоящему сайнеру. То есть чем ниже направление, тем ближе доходит до основного рутового, рутовой машины сайнера, у которого один свой ключ приватный, он подписывает просто сам себе моментально блоки. И все, вот такой вот поток. Когда сайнер хочет что-то сделать, какой-то проект, он запускает свою первую транзакцию, его машина отправляет дальше транзакции в мультисиги, либо в каналы, либо в депозитарии. Соответственно, дерево растет так. Есть сайнер-сущность, она может создавать новые энтити, другие, которые с кем-то составны, либо могут от себя добавлять каналы и депозитарии. И каждая другая сущность также может иметь каналы и депозитарии. А у каналов и депозитарий субмашин быть не может, потому что они финальные, так сказать, листья. И все. И так сущность может взаимодействовать с другими сущностями через каналы. Если взаимодействие идет как-то плохо, оно использует общий канал в виде депозитария. То есть два вида субмашин. В ней голосуют парент-машины, вот эти или супермашины, за эти пропозылы. Когда накапливается какой-то процент, то эти пропозылы внутри исполняются и выбрасывают. Либо event out вверх, либо, например, в какой-то момент, когда у них есть какие-то негативные условия, они выбрасывают в общий канал, в виде депозитария. Весь этот блокчейн и Наскалье, блядь. Но, типа, ты очень точно... Короче, это хороший термин, очень подходит к истории, которую ты задизайновал. Что ты не понимал в этой формулировке? Актер в данной модели взаимодействует путем обмена сообщением с другими актерами, и каждый в ответ на получаемые сообщения может принимать локальные решения. Создавать новые актеры, посылать свои сообщения, устанавливать, как следует, реагировать на последующие сообщения. Ну да, похоже на... Да, да, похоже. Проверите сюда. Да, глянь, открыл. Да... Как же анонимность. Так... Насколько это удобно. Насколько это удобно. Смотри, на всякий случай, я не хотел бы сейчас углубляться... Углубляться в эту статью с актерами. Но просто посмотри, как он рисует в блоке. Я её скинул в ссылочку. Просто на этой тракции по диагонали глянь. Это не будет читано, если что-то откликается. Потому что там не всё может быть. А тут был блокчейн фигарьский. Вот. Какая красота. Вот именно, видишь, как вот... Я просто потому, что можно иллюстрацию, например, взять. Ну, именно подход к иллюстрации. А давай вглубь пока не погружаться, чтобы... Ну, а если погружаешься, то ты, наверно, скачет оффер. Да, да. И тут, ну, типа... Тут могут быть расхождения с тем, что Егор придумал по этому блокчейну. Я только как пример картины, кстати. Так. Здесь получается состояние. Состояние мы не трогаем. При этом оно внутреннее. У нас получается event. Опа. Выворачиваемся. Мы смотрим на историю, как на изолированную систему, которая общается относительно событий. То есть мы чего-то тут не сообщаем. Мы что-то от него получаем. Транзакция на вход. Да. Авторазакция. Какие данные находятся в основной транзакции? То есть у нас что-то на off-chain системе происходит. Нам нужно каким-то образом решить, кто будет вообще транзакцию отправлять. Или все отправляют. Пропозит. У каждой системы есть пропозит. Ну, допустим, смотри. Два гипотетических ситуации. У нас два человека решили кинуть деньги друг к другу. Один дает другому деньги. И такое. Нам надо сообщить об этом эфириуму. Мы совершили операцию off-chain. Мы подтвердили, что мы согласны с операцией. И кто-то один из двух, тот часть отправляет вместе. Да-да-да. За всем кто-то отправляет. Когда смещается состояние в канале, ты не обязан отправлять. Депозитарий — это пока отдельная сущность. Он отвечает за ввод и вывод депозитов в систему. Вообще деньги рождаются там. Это корень появления ассетов. Я так понял, что ты когда говоришь, что у тебя столик, то в локальном смысле я имею в виду эфириум. Эфириум или… Любой элемент, да. Эфириум. Твоя сетка, которую ты делаешь. В то же самое время там, в самой этой среде, есть его профсерф. То есть машина-депозитарий, которая работает не полноценно, а просто общается с полнодой либо локальной, либо какой-то внешней. Но минимальный интерфейс поддерживает такой же, чтобы на вход можно было добавлять транзакции, а на выход — никуда не читать. Тихо! Тихо! Угу. Тихо! Тихо! Тихо! Тихо! Тихо! Тихо! Тихо! Тихо! Тихо! Тихо! Тихо! Тихо! Тихо! Тихо! Егор, а что в эндинг приходит из эфириума? Какие события происходят? Любые изменения резервов. Сначала резервы попадают на аккаунт сайнера, потом он его закладывает в аккаунт канала между кем-то, либо в аккаунт сущности опять-таки с кем-то. А ты подписываешься на какие-то события в эфириуме? Ты подписываешься на все сущности, которые связаны с тобой. На ID всех машин. На себя как сайнера, на ID всех, с кем у тебя канал, чтобы узнать, когда у них изменится, например, схема аутификации, и у тебя есть время, чтобы либо начать дисплет, либо обновиться до новых подписей. Что еще? Ну, то есть на те транзакции, которые ты сам делаешь, и которые тебя касаются, и которые касаются всех твоих каунтерпатий. Собственно, это основное. И ты эти транзакции все рефлектишь в своем локальном состоянии. То есть меняешь JSON-карту, резерву разных токенов для себя самого, и для своих сущностей, и для каналов, в которых ты работаешь. То есть сайнер, сущности сайнера и каналы сайнера. Сайнер. Канал. Но при этом получается, что Ethereum от хаба идет затрос. От кого угодно. От любого сайнера, от любой сущности. Почему? Это общая машина для всех. Вот представь, что это... Гиппозитарий. То есть вот это сайнерские сущности, это сущность двух сайнеров, как Multisig. Вот это канал Multisig с сущностью C. А это гиппозитарий, соответственно. Либо эта сущность, либо эти три сущности могут с ней общаться, как интенсивность. Это канал, он с ним общаться не может, потому что он... Так не надо. Каналу, чтобы связаться с гиппозитарием, надо послать event вниз, в соответствующую сущность, которая с ним. Например, вот эта часть канала, это C. А вот эта часть канала, это вот. И, соответственно, они могут послать txout либо в канал, либо в гиппозитарий. Давай еще чуть-чуть с терминами. Что такое txinput? Транзакция. Транзакция. Входят-выходят. Сверху они входят-выходят. Вот стрелочки. Чем отличаются транзакции от event? Транзакции подписаны нижними участниками полностью. Сигнатура тут есть. Например, чтобы послать ABC канал, надо подписи A и B, чтобы она была... из двух подписей состояла. А ивенты, им не нужны подписи, потому что предполагается, что у тебя уже есть все субмашины, когда ты с ними работаешь. То есть у любой субмашины есть доступ... Она может писать любую супермашину, вот эту надмашину, ивентами, потому что ты уже ее исполнил. В контексте прошлого сезона, субмашина-это она над чем? Над... То есть, получается, эфириум-это... Субмашина. Это субмашина. Над твоей... Под. Над твоей ключевой машиной. Да, сайнерской. То есть сайнерская машина, под ней уже нет никого. Там не только оператор, который сам эти транзакции и воздуха создает. Кошелек, точнее. Кошелек взаимодействует с сайнерской машиной. То есть она супермашина. У нее будет субмашина. Это дипезитария и канал. Или другие сущности, у которых точно так же дипезитария и канал. Так. И все они могут... Вот это девайсы, и у них только по одному инстансу на каждую машину. То есть вот на машине ACE 3 машина запущена, на машине ACE только две. А, ну плюс по одной на каждой для дипезитарии. Каждые 100 миллисекунд цикл луп, который проверяет, надо ли мне пропозить что-то в машине, если ты пропозер. Если ты пропозер, ты, например, C, если пропозер вот в этой сущности, то он раз в 100 миллисекунд рассылает лупы сюда и сюда, в свою следующую транзакцию, в свою следующую лупу. И получает подписи. Когда получил подписи, он рассылает тебе подписи, все, финализовано. Когда финализовано тут, ивенты выпускаются и идут на этаж ниже. Соответственно, тут они пошли включаться сюда и сюда. Тут какой-то из этих пропозеров раз в 100 миллисекунд, он начинает уже обрабатывать ивент пул, который не обработал. Включает их блок и дальше рассылает вниз. И, конечно, кто? Сайнеры. Сайнеры. Ниже них уже никого нет. С ними взаимодействует напрямую кошелек. То есть это лицо. То есть твой кошелек, это главная супермашина, она взаимодействует, она делает запросы, типа твоего лица в дипезитарии или в каналы. Делая подписанные транзакции. Когда ты говоришь мой кошелек, ты имеешь ввиду кошелек именно твоей сети, которая синкается с дипозиторием. Кошелек просто UI, который читает состояние, вот отсюда стоит и дает возможность создать транзакции на вход. Просто визуальное отображение. А на ноде запущены сами машины, которые принимают на входе транзакции. И когда у тебя твой кошелек получил транзакцию, он сначала создает пропозал, но так как ты главный сайнер, то пропозал автоматически исполняется. Просто чтобы он в истории оставался. И при исполнении пропозора исходящие транзакции создаются в любое количество. И в процессе консенсуса транзакции подписываются вместе с тем же, как и подписывается сам блок. Соответственно, когда у тебя подписаны транзакции, ты пропозор и отсылаешь следующую машину, куда она направлена. Если ты владеешь проподерской машиной для следующей машины, то ты сам предлагаешь через 100 миллисекунд блок. Если нет, то ты делаешь share на проподерскую машину, и она себе добавляет твою транзакцию. А хаб это тоже такая же сущность, с которой ты держишь каналы. А зачем она нам, если у нас уже может быть кто-то принимает решение? Короче, зачем она нам нужна в контексте этой системы, если кто-то может объявить себя хабом? Любой может объявить себя хабом, конечно. Просто ты как человек выбираешь в кошельке список тех, кто желает быть хабом. У всех разные параметры. Кто-то там существует много лет, у кого-то больше каллатрова. Кто-то является отображением репутационной сущности какой-то известной. И ты сам выбираешь это как выбор банка. А у них такая же машина запущена на их системе. Это может быть либо одна сайнерская машина, то есть хаб может быть по сути сайнером одним. Либо может несколько из них. Сайнеров объединенных. Такой кворумский, так сказать, тоже хаб. И между тобой и хабом создается субмашина-канал. Соответственно, в любой твоей взаимодействии с хабом ты посылаешь свою субмашину. В зависимости от того, кто из вас пропозер. У вас происходит консенсус, она выполняется и ивенты идут уже вниз в машину хаба. Дальше он ее обрабатывает и дальше посылает в канал следующему участнику. Дальше будем попробовать расставать сверху вниз. Получается от UI до финального этого. Получается у нас есть интерфейс какой-то. Он общается у нас с нодой вокальной. Это скорее уже имплементация. Он общается с нодой через веб-сокеты. В ноде у нас запущен демон, который управляет консенсусом машины. Там всегда есть аймерская машина. Так, хорошо. Теперь смотри, вот у нас есть UI. Он показывает нам какие-то данные. У нас есть нода. Она присылает нам какие-то данные. Типа статуси кошелька, какие-то прогрессы, которые происходят в этот момент. Будь здоров. Какой-то самый кокаиновый чух. Хорошо, у нас тут UI. А у ноды у нас получается сама система. У него будет какой-то стейт. То есть здесь у нас будут основные шкоты происходить, да? Да, конечно. И, соответственно, неважно является эта нода хабом или нет. Это надстройка. Хабами называются те, у кого много каналов. Хорошо. Когда мы говорим канал, у нас есть еще один человек. Я рисую еще один UI. Еще одну ноду. Вот. У нас нода. У него там стейт-машина какая-то здесь. И теперь мне нужно... Так, у нас где-то тут, собственно, депозиторий. Подожди. У каждого еще... Вот уже хорошее описание машины. Ты просто квадратик такой рисуешь. Это сайнерская машина. Дальше над ней квадратик. Это депозиторий машины. То есть это levelidb хранится по ключу. Сайнер id, машина id. Два у тебя получается ключа. Хранится хеддер, который является корнем... Подожди, давай я все. Я просто пытаюсь через user story это все понять. Пока не думай про user story. Правда. Мы же должны как можно быстрее дойти до MVP, чтобы что-то функционировало у нас. То есть мы должны... Все правильно. Все понятно. User story, да. Вот кошелек отправляет. Это может быть терминальный запрос. Все равно все происходит вот тут. Он просто узнает о состоянии новой транзакции. Депозиторий. То есть вот то, что ты нарисовал по сути. И мне нужно отправить отсюда сюда. Что происходит? Что у тебя изначально есть? А у тебя изначально есть токены? Ну, допустим... Откуда они берутся? Это же депозиторий. То есть у тебя есть какой-то аккаунт, где у тебя есть токены. Ну да, у тебя есть Ethereum, например. Любой там ERC20, например, у тебя есть. Ты его забридживаешь сначала, засовываешь в смарт-контракт специальный, резервный менеджер. Но он так называется. Депозиторий. То есть там ты переводишь стандартное владение токеном внутрь вот этого контракта, где ты тоже владеешь просто через прослойку. То есть уже теперь ты баланс внутри этого контракта. Но это первый этап. Ты все еще не можешь послать. Точнее ты можешь послать ему внутри этого депозитария, но заплатишь заанченную комиссию, и вообще никакой разницы нет по сравнению с обычным перевозом в UZT. Поэтому ты пользуешься системой банковской, так сказать, хабовской системой. Ты выбираешь в юзер-интерфейсе, выбираешь какой тебе нравится хаб, нажимаешь присоединиться. Это вот обычный человек, это не хаб. Чтобы отправить обычного человека, третий сущность создается, у которого то же самое, только он как бы 24 на 7 онлайн. С его сайбером можно соединиться. Headless получается. Ну да, и либо оператор подсоединяется, чтобы проверить здоровье системы, а не чтобы делать транзакции. То есть он не использует хаб как свой кошелек. Потому что хаб просто выполняет технические задачи. Прибалансируется, обрабатывает ПЦЖ. Кинь просто этот на стол. Егор, подскажи, пожалуйста, в стенке у тебя слева подпись с А не распорядна. А минус Б и А минус Б минус С. Это что такое? А, Б, С сущности. Эти два создают А, Б сущность на двоих, а эти А, Б и С. То есть это сущность А, Б плюс С. То есть они мультисиг плюс этот. Это может быть как и канал, может быть как и сущность самостоятельно. Просто канал это настройка на сущность, которая дает возможность выйти из сущности, забрав свою часть денег. А из обычной сущности выйти нельзя. Значит, получается, я хочу вывезти деньги. Я сообщаю сюда. Вы создали канал сначала с хабом. Канал с хабом. То есть у вас субмашина создалась. Вот как раз представь. Ты А, он Б. Вот у вас субмашина А, Б. Это ваш канал. То есть вы шарите какое-то состояние. У вас блокчейн на двоих получается. Поверх тех ваших же сайнер-машин. Соответственно, вы теперь общаетесь с этим блокчейном через создание сначала транзакции в своей сайнер-машине, которая создает транзакцию в вашем канале на двоих. И обратно же получаете от него ивенты в вашу сайнер-машину. И дальше на кошелек, на UI. Но, опять-таки, он так просто. Сразу ты не можешь переводить. Ты сначала должен зачислить вот в этот вот канал. Вот в этот канал с хабом. А как ты туда зачистишь? Тут входит третий. Третий субмашин, депозитарий. То есть поверх вот это А и Б у вас есть эта хуйня. И помимо А и Б, субмашина вот эта, депозитарий, она будет нарисована всегда наверху самая. Потому что она у всех одинаковая. То есть одинаковое состояние на всех участников. И вы делаете transaction out, и в transaction out она попадает в transaction in этого этериума, которое переводит деньги с резервного баланса сущности А на резервный баланс сущности А, Б. Параллельно сдвигая либо не сдвигая он дельту, которая помогает понять, кому собственно зачисляется, левому либо правому участнику. То есть сначала там было пусто. У кого-то на резервы были бабки. И теперь ты хабу закладываешь либо со своей стороны. Ну, твоя задача закинуть со своей стороны. Соответственно, если ты левый участник, я тебе тогда рисовал схемку с он дельтой. То есть увеличивается коллатерал. Соответственно, по умолчанию деньги попадают правому участнику. Это хабу. Соответственно, чтобы зачистить тебе, ты указываешь, я зачищу его левому. И у тебя он дельта сдвигается на такое же количество денег. Соответственно, он дельта плюс он дельта равна теперь 100. Соответственно, если происходит дисплет, ты получаешь бабки назад. То есть у тебя сейчас заложен коллатерал в канале к хабу. Ты можешь его моментально теперь посылать. То есть, получается, ты хочешь перевести деньги. Ты сначала выделяешь эти средства. Закладываешь, заладчиваешь в вашу машину, канальную между тобой и хабом. Используешь запрос в транзакцию на ин, в депозитарную машину. Все вот эти 23 вида машины. Энтити, канал и депозитарий. Когда ты хочешь работать с резервами, ты общаешься с депозитарием. Когда ты хочешь работать с оф-дельтой и субконтрактами, ты общаешься с каналом. А если бы у тебя в этом была документация? Старая уже, заброшенная. Бывающая концепция, в принципе, что если мы избавляемся вообще от процесса перевода средств, все равно остается процесс общения между, ну типа именно передачей текстов, сообщения, грубо говоря. Получить то, как описано. Как бы это выглядело? Это значит текстовое сообщение, как выглядело? Да. У тебя вот просто данные, то есть без валидации с перевода средств. Так, любая транзакция – это текстовое сообщение. И event out – это тоже текстовое сообщение. То есть, может быть, вы можете слайд транзакции с текстовыми сообщениями в ваш канал, и, соответственно, у вас в UI будет отображено, кто что написал. Это, по сути, как чат двоих. Только теперь, когда вы залочили, все произошло. В депозитарии вы залочили 100 долларов, соответственно, депозитарий выбросил ивент. Так как он запущен на всех трех машинах, Node.js, соответственно, этот ивент автоматически распределил в event inbox вот этой вашей машины. Не, не канальной. У канальной машины не может быть депозитарий, а он должен отправить это в ваши именно сайнеры. То есть, от лица кого вы находитесь в канале. То есть, тут пришло, так, ты зачислил 100 баксов к кабу, и к кабу пришло. Тебе зачислил этот юзер. Соответственно, вы оба теперь добавляете вот эту транзакцию, не событие, что я хочу сказать, что зачислилось 100 баксов в депозитарии в таком эфирском. И вы закидываете транзакцию в канал. Соответственно, первая транзакция создает предложение, типа я считаю, что так произошло. А вторая транзакция от второго участника автоматически его одобряет. Типа я согласен, что так произошло. Когда пропозывается одобрение, то внутри канала меняется состояние резерва. То есть, оно становится 100 и меняется состояние он-дельта. Канал только между кабом и участником получается. Ну да. То есть, вот это у нас получается канал. То есть, мы как бы соединяемся с кабом. И вот у нас общий стейк, который мы валидируем между собой. Да. И точно так делает получатель. Он делает то же самое с кабом по той же схеме. Только он не закладывает ничего, он же получающая сторона. Он вместо этого при просоединении к кабу говорит, я тебе, каб, доверяю на кредитный лимит до такой-то суммы. Угу. Эта сумма будет, например, суммарной. Десять тысяч долларов в любых ассетах. То есть, ты можешь мне прислать пять тысяч USDT, пять тысяч USDC, а потом ничего не прислать. Либо разных говно токенов. То есть, по умолчанию канал еще должен знать цену на всех токены в этом канале. То есть, иметь какую-то квотрейшн. Чтобы можно было выделить один кредитный лимит, а не каждый отдельный ассет указывать. Потому что это неудобно, мне кажется. Так вот, вот этот участник указал кредитный лимит, и теперь можно совершить первый платеж. Как происходит первый платеж? А, закидывает. Но в простом виде это будет, чтобы не говорить про субконтракты сейчас, просто он говорит, я меняю off-delta так, что тебе, ты получаешь 50 хабов. У хабов, в его канале, вот это у них общий как бы блокчейн на двоих, то есть машина. Происходит консенсус, где вот эта вот транзакция, как бы финализируется. Это, соответственно, девайс хаба, это девайс юзера. И когда финализируется на девайсе хаба, у него event outbox выбрасывает ивент, который падает куда? В сайнера. Сайнеру получает ивент, что тебе пришло 50 баксов в таком-то канале. Гарантированно. Мы уже их получили, и все подписано. Но такое условие. Ты получишь их только, если передашь эти 50 баксов Пете, следующему участнику. Условие показать секрет от какого-то хэшлока. Там все это старая технология, все это понятно. И теперь хаб от лица сайнерской машины выбрасывает теперь новый текст. Outbox у него вот этот. Только теперь в канал с вторым участником, собственно. И ему также, допустим, вот если бы эти B и C создали так же между собой, а этой машины, допустим, не было. В принципе, тогда логично. A и B — это их канал на двоих, B и C — это их канал. То есть хоп-хоп-хоп, хоп-хоп-хоп. Понятно? То есть он выбрасывает транзакцию в канал со вторым участником, где он говорит, я тебе также перевожу 50 баксов вот в такое же условие, хэшлок какой-то. C, соответственно, ему приходит ивент, когда у него финализуется на его же машине, эта машина выбрасывает ивент. Сайнер получает этот ивент, расшифровывает пакет, пакет, там находится сам секрет для него. И он, соответственно, может вернуть секрет и получить, затянуть себе эти 50 баксов. И все, и дальше по цепочке оно возвращается. То есть транзакции туда, ивенты вниз. Все, и это может быть 10 хабов подряд. То есть хоп-хоп, там дальше, пошел, и до получателя. Со свопами по-другому. Со свопами он, ты добавляешь... Два токена, да, на другое меняется. Там тебе не надо его роутить куда-то, там вместо роутинга ордер-бук. То есть на сайнерской машине хранится большой ордер-бук, который помнит, кто с кем предложил ему что-то делать. Каждый новый ордер приходит, с этим ордер-буком матчится. Если матч нашелся, то, соответственно, назад по каналу возвращается, мы вам готовы засетить. Получается, смотри, если происходит обмен, то получается, что нужно, чтобы в средствах были выделены средства для USDT и Ethereum. Капасити, объем для посылки ты имеешь в виду. Ну да, теперь нужно опираться совершенно на двумя сразу одновременно. Вот, допустим, USDT ты владеешь в отхаб, а Ethereum не владеешь. Но чтобы получать Ethereum отхаба, тебе надо кредитный лимит открыть. Я говорю, я тебе там это, ты мне даже это. А, нет, в эту сторону кредитный лимит. Ты коллатерл потратил, получил кредит на эфире. Окей, хорошо. То есть это как раз вот derive функция, которую я тебе показывал, она все это и описывает. Типа, сколько ты можешь получить в каком-то ассете, а это складывается из того, сколько входящего и исходящего кредита. То есть, если каждый из отрезков по 50, то 150 можно послать сейчас, и так то 100, и наоборот. Сначала используется тот кредит, который тебе дали, пообещали, потом ты сам обещаешь свой коллатерл, потом ты сам входишь в свой кредит. Свой кредитный лимит. Егор, а квадратик 11, состоящий из четырех маленьких, это... Это депозиторий. Это entity? Нет, я врезал. Депозиторий вверху у нас нарисованы. Они все из маленьких четырех квадратиков. Вот квадрат 11, состоящий из четырех, это что? Это отображение машины, ее последнего блока. Просто главные основные филды. Вот я тут как раз нарисовал блок и зачеркнул те филды, которые мне нужны сейчас. Вот я пытаюсь понять, чтобы не было... Короче, entity это что? На этом чертеже. Короче, entity и машина как соотносятся? В данном чертеже даже не определено, кто есть entity, кто есть что. Это уже надлогика. То есть машина рутовая, это всегда entity сайнер. Она может создавать новых entity с другими, либо создавать субмашины в виде каналов с другими, либо депозитарии. У депозитариев и каналов нет подмашин, а у остальных entity дальше по цепочке можно создавать сколько угодно. То есть entity это то сущность, которая используется как что-то целостное, у которой свой резерв есть. Какое взаимоотношение между entity и машиной? Все, это машина. Три вида машин. Entity, каналы и депозитарии. Это все абсолютно одинаковые машины. Под виду просто. А b, c это получается entity машина, да? Ну да, либо это может быть канал. То есть зависит от того, при создании как вы договорились. Каналы отличаются от entity, что вы помимо того, что меняете состояние, вы еще и обмениваете диспет-пруфами. То есть при выполнении вот этих переводов, там где 3xout, там же создается и диспет-пруф подписанный, который в случае чего можно отправить к депозитарии. Слушай, ну ладно, сейчас я поставлю, что все нормально расписались. Что это все у нас стоит тайм-машины. Да. Есть 3 типа, и между ними есть такие соглашения. Ну да. И рутовая сайдерская, она рождает новые машины. То есть ты через транзакцию как раз конструктор делаешь. А рутовая сайдерская она какого типа? Просто entity. То есть от нее можно строить сразу и каналы и депозитарии, а можно строить более сложные entity. Да. Сука. Да. Тихо. Тихо.